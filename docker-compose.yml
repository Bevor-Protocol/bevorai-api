services:
  api:
    container_name: api
    build:
      context: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PGHOST=postgres:5432
      - PGSCHEME=postgres # tortoise doesn't work on postgresql
    volumes:
      - ./uv.lock:/app/uv.lock
      - ./pyproject.toml:/app/pyproject.toml
      - ./app:/app/app
    command: uv run hypercorn app.main:app --bind 0.0.0.0:8000 --reload
    depends_on:
      - redis
      - postgres
    restart: always

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=certaik        # Create a user named 'certaik'
      - POSTGRES_PASSWORD=testing    # Set password for 'certaik'
      - POSTGRES_DB=certaik          # Create a database named 'certaik'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U certaik -d certaik"]
      interval: 10s
      timeout: 5s
      retries: 5
  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: always
    ports:
      - "9000:9000"
    depends_on:
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=certaik
      - GF_SECURITY_ADMIN_PASSWORD=testing
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=9000
      - GF_LOG_LEVEL=error
      - POSTGRES_URL=postgres:5432
      - POSTGRES_USER=certaik
      - POSTGRES_PASSWORD=testing
      - POSTGRES_DB=certaik

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    expose:
      - 6379
    command: redis-server --bind 0.0.0.0

  worker:
    container_name: worker
    build:
      context: .
    depends_on:
      - redis
      - postgres
    command: arq app.worker.main.WorkerSettings --watch app/worker/
    env_file:
      - .env
    environment:
      - PGHOST=postgres:5432
      - PGSCHEME=postgres
    links:
      - redis
    volumes:
      - ./poetry.lock:/app/poetry.lock
      - ./pyproject.toml:/app/pyproject.toml
      - ./app:/app/app
    restart: always

volumes:
  redis_data:
  postgres_data:
  grafana_data:
